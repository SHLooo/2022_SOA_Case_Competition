{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.0.5 (2021-03-31) -- \"Shake and Throw\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin17.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Workspace loaded from ~/Desktop/SOA Case Competitoin/R_Project/.RData]\n\n",
        "> ",
        "knitr::opts_chunk$set(echo = TRUE)",
        "> ",
        "library(\"readxl\")",
        "> ",
        "",
        "> ",
        "file_path = \"2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "",
        "> ",
        "#read in tables",
        "> ",
        "LeagueShoot <- read_excel(file_path, sheet = \"League Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "Error: `path` does not exist: ‘2022-student-research-case-study-player-data.xlsx’\n",
        "> ",
        "knitr::opts_chunk$set(echo = TRUE)",
        "> ",
        "library(\"readxl\")",
        "> ",
        "",
        "> ",
        "file_path = \"2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "",
        "> ",
        "#read in tables",
        "> ",
        "LeagueShoot <- read_excel(file_path, sheet = \"League Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "Error: `path` does not exist: ‘2022-student-research-case-study-player-data.xlsx’\n",
        "> ",
        "print(\"Player Occurance:\")",
        "[1] \"Player Occurance:\"\n",
        "> ",
        "for(i in seq(max(table(LeagueDefense$Player)))) {",
        "+ ",
        "  print(paste(i, \":\", sum(table(LeagueDefense$Player) == i)))",
        "+ ",
        "}",
        "[1] \"1 : 1512\"\n[1] \"2 : 1719\"\n[1] \"3 : 189\"\n[1] \"4 : 8\"\n[1] \"5 : 1\"\n",
        "> ",
        "",
        "> ",
        "defense.attributes <- c(\"Player\",\"90s\",\"Tackles TklW\", \"Tackles Def 3rd\", \"Tackles Mid 3rd\", \"Tackles Att 3rd\", \"Vs Dribbles Past\", \"Pressures Succ\", \"Pressures %\", \"Blocks Blocks\", \"Int\", \"Clr\", \"Err\", \"TklW%\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "Error in `[.data.frame`(LeagueDefense, , defense.attributes) : \n  undefined columns selected\n",
        "> ",
        "library(\"readxl\")",
        "> ",
        "",
        "> ",
        "file_path = \"../data/2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "",
        "> ",
        "#read in tables",
        "> ",
        "LeagueShoot <- read_excel(file_path, sheet = \"League Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "Error: `path` does not exist: ‘../data/2022-student-research-case-study-player-data.xlsx’\n",
        "> ",
        "library(\"readxl\")",
        "> ",
        "",
        "> ",
        "file_path <- \"../data/2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "",
        "> ",
        "#read in tables",
        "> ",
        "LeagueShoot <- read_excel(file_path, sheet = \"League Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "Error: `path` does not exist: ‘../data/2022-student-research-case-study-player-data.xlsx’\n",
        "> ",
        "getwd()",
        "[1] \"/Users/liushuhao/Desktop/SOA Case Competitoin/R_Project\"\n",
        "> ",
        "file_path <- \"data/2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "## observe the data",
        "> ",
        "",
        "> ",
        "# number of rows in each table",
        "> ",
        "print(\"number of rows in each table\")",
        "[1] \"number of rows in each table\"\n",
        "> ",
        "for(table in tables){ ",
        "+ ",
        "  print(nrow(table))",
        "+ ",
        "}",
        "[1] 5554\n[1] 5554\n[1] 5554\n[1] 2015\n[1] 488\n[1] 488\n",
        "> ",
        "",
        "> ",
        "# number of unique players in each table",
        "> ",
        "print(\"number of unique players in each table\")",
        "[1] \"number of unique players in each table\"\n",
        "> ",
        "for(table in tables){ ",
        "+ ",
        "  print(length(unique(table$Player)))",
        "+ ",
        "}",
        "[1] 3429\n[1] 3429\n[1] 3429\n[1] 1603\n[1] 488\n[1] 488\n",
        "> ",
        "defense.attributes <- c(\"Player\", \"90s\", \"Tackles Tkl\", \"Tackles TklW\", \"Vs Dribbles Past\", \"Pressures Succ\", \"Pressures %\", \"Blocks Blocks\", \"Int\", \"Clr\", \"Err\", \"TklW%\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "Error in `[.data.frame`(LeagueDefense, , defense.attributes) : \n  undefined columns selected\n",
        "> ",
        "library(\"readxl\")",
        "> ",
        "",
        "> ",
        "file_path <- \"data/2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "",
        "> ",
        "#read in tables",
        "> ",
        "LeagueShoot <- read_excel(file_path, sheet = \"League Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "Error: `path` does not exist: ‘data/2022-student-research-case-study-player-data.xlsx’\n",
        "> ",
        "defense.attributes <- c(\"Player\", \"90s\", \"Tackles Tkl\", \"Tackles TklW\", \"Vs Dribbles Past\", \"Pressures Succ\", \"Pressures %\", \"Blocks Blocks\", \"Int\", \"Clr\", \"Err\", \"TklW%\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "Error in `[.data.frame`(LeagueDefense, , defense.attributes) : \n  undefined columns selected\n",
        "> ",
        "LeagueDefense[, Tackles Tkl]",
        "Error: unexpected symbol in \"LeagueDefense[, Tackles Tkl\"\n",
        "> ",
        "LeagueDefense[, \"Tackles Tkl\"]",
        "   [1]  1.41  1.09  2.17  4.17  3.93  2.73  3.46  1.62  1.36  0.90 -0.04  1.90  0.65  0.08 -0.08 -0.01  0.03  3.02  1.75  3.17  0.46  2.45  1.52  1.45\n  [25]  2.74  1.82  1.70  0.60  0.65  3.69  2.38  1.15  1.90  1.23  1.29  1.45  1.20  2.09  0.87  0.43  0.81  1.75  1.96  1.19 -0.02  1.90  2.69  4.21\n  [49]  0.09  2.09  0.95  2.59  1.76  2.27  1.90  1.15  2.16  1.62  2.33  1.23  2.06  1.75  0.03  0.74  1.52  0.83  2.05 -0.03  0.57 -0.06 -0.02  2.13\n  [73]  1.45  1.24  1.84 -0.01  2.40 -0.03  3.28  2.75  0.71",
        "  0.02  1.46  1.82  4.01  2.63  1.40  0.85  1.26  1.61  0.88  4.24  1.01  0.56  0.47  1.36\n  [97]  1.79 -0.01  0.04  1.85  1.41  3.20  2.45 -0.06 -0.09  2.41  0.98  1.32  1.34  1.26  2.28  2.02  1.79  2.90  2.12  4.96  2.41  1.94  0.36  1.47\n [121]  0.10  2.38  4.95  0.83  0.61  1.66  0.72 -0.06  0.05  3.07  3.52  2.71  1.36  2.58  0.02  1.42  1.64  3.67  2.23  2.30  1.22  0.72  1.66  0.50\n [145]  0.71  0.24  0.85  0.81  0.07  1.93  0.74  0.96  1.65  0.05  0.04 -0.09 -0.05  3.12  1.83  2.35  3.01  1.16  0.08",
        "  2.19  1.03  2.06  1.21  0.96\n [169]  1.36  2.36  1.81  1.96  0.83  1.96  2.61  1.92  1.94  1.40  1.05  1.13 -0.05  3.19  1.51  1.78  0.09  0.05  1.23  0.83  2.27  2.69  1.51  0.90\n [193]  2.34  0.80  2.24  2.50  5.01  0.73  1.64  1.91  2.18  1.18  0.79  1.22  0.44  0.08  0.67  0.79 -0.07  0.01  0.77  0.67  2.74  1.91  1.72  1.91\n [217]  2.63  1.18  1.46  0.40  0.73  1.60  2.23  1.82  1.70  1.08  0.08  1.72  1.57  0.64  1.03  1.80  1.51  0.55  0.03  0.00  1.06  3.04  3.26  2.57\n [241]  2.12  1.72  4.79  1.30",
        "  2.59  2.16  2.28  1.40  2.08  4.14  2.45  1.71 19.98  2.02  0.53  0.66  0.70 -0.07  3.29  2.19  2.78  1.94  2.29  1.61\n [265]  1.74  1.25  1.54  1.49  1.74  1.18  2.51  0.71  1.46  1.66  2.81  0.85  0.00  1.67  0.56  0.95  1.46  1.79 -0.01  0.03  1.64  0.04  3.12  2.12\n [289]  2.07  4.12  2.42  1.18  2.27  1.68  4.39  1.25  1.26  1.98  1.25  3.11  1.10  2.27  0.06  0.51  0.51 -0.03  2.17 -0.09  1.93  1.85  4.17  1.77\n [313]  2.38  2.49  2.31  1.19  0.86  1.89  1.96  1.60  1.65  2.70  4.94  2.81  0.85  1.91",
        "  1.72  1.67  2.15  1.54  2.58  0.98  1.01  1.38  1.20  1.44\n [337]  0.08  0.69  1.32  2.54  2.76  1.02  3.70  1.87  0.77  3.30  1.99  8.76  3.45  1.33  1.82  1.67  1.27  1.76  1.88  1.75  0.01  0.66  0.55  1.15\n [361]  2.06 -0.08  0.05  2.45  2.07  1.61  3.42  1.16  3.31  0.08  1.98  3.12  1.46  1.99  1.91  2.24  1.99  1.13  1.76  3.20  1.34  2.54  0.48  0.09\n [385]  1.68  3.18  1.74  0.00 -0.01  0.64  1.57  2.32  0.05  0.03  0.01  3.83  2.30  1.42  2.37  1.38  0.01  3.96  1.23 10.05  2.42  2.58  3.16  1.20",
        "\n [409]  1.53  2.01  2.02  2.05  1.49  2.03  0.67  0.00  1.72  0.76  1.26 -0.03 -0.06  2.84  2.74  2.56  2.70  2.59  2.91  2.50  1.89  3.01  1.38  0.86\n [433]  3.33  2.98  2.31  1.94  1.95  1.94  1.07  2.82  0.19  0.47  0.85  0.07  1.94  0.96  1.50  0.07 -0.07  0.04 -0.02  4.12  2.89  6.73  1.63  3.07\n [457]  3.58  3.43  2.66  0.91  1.19  1.81  1.85  1.90  1.97  2.09  1.21  3.69 -0.04  3.42  0.90  1.67  0.05  1.96  0.38  0.04  0.07  2.78 -0.03  5.83\n [481]  2.90  2.06  1.72  1.73  2.33 -0.07  3.41  1.06  1.47",
        "  2.24  2.15  1.27  3.84  2.85  1.91  0.53  1.51  0.74  2.84  3.18  0.52 -0.07  1.89  1.73\n [505]  5.93  3.41  3.02  1.40  2.47  1.69  1.90  1.45  3.57  1.49  1.77  4.38  0.95  2.82  0.31  0.00  2.24  0.76  1.95  1.48  0.08  2.63  1.38  2.02\n [529]  2.91  2.98  2.21  1.51  0.05 -0.04  0.02  2.04  1.60  0.03  2.72  1.31  3.03  1.48  2.60  1.20  2.05  1.02  0.56  0.54  0.48  0.09 -0.04 -0.01\n [553]  3.50  3.35  6.68  0.04  2.91  3.33  2.15  0.06  0.02  1.20  2.17  1.52  1.80  2.25  2.76  1.35  0.07  2.06  3.40",
        "  0.00  1.14  0.50  1.69  0.91\n [577] -0.10  0.65  0.82  1.31  1.30  1.19 -0.05  0.10  1.13  3.23  2.74 -0.05  2.94  3.19  1.30  1.53  0.68  2.97  0.52  1.22  2.01  1.64  2.73  0.65\n [601]  0.26  0.01  1.12  1.05  9.97  1.62  2.86  1.26  1.51  1.16 -0.06  2.26  2.72  2.16  1.43  0.06  0.04  2.07  2.03  1.33  1.46  2.91  3.74  0.76\n [625]  1.11  2.35  1.36  0.67  1.14  1.20  1.62  1.91 -0.02 -0.07  2.45  1.98  4.14  1.30  3.93  1.60  1.76 -0.02  2.34  1.69  2.73  2.06  1.10  3.70\n [649]  2.38  2.55  1.49  2.29",
        "  1.91  2.63  1.51  1.05  0.43  0.04  2.64  2.13  1.68  0.91  1.40 -0.04 -0.07 -0.03  3.07  0.79  4.03  3.28  3.89  0.03\n [673]  1.55  3.92  1.45  1.72  2.65  1.85  3.25  1.85  1.41  1.31  3.13  0.03  0.07  2.20  1.46  1.89  1.17  0.06  0.62  0.05 -0.02  2.12  3.77  2.76\n [697]  3.36  3.62  1.64  3.68  2.39  1.41 -0.02  2.90  0.94  2.45  1.55  3.27  0.53  1.41  1.88  1.99  0.06  0.04  2.89  0.43  2.40  2.20  3.47  2.68\n [721]  1.62  2.92  2.00  2.40  2.26  1.16  2.41  2.52  2.78  1.59  1.00  3.57  2.35  3.29",
        " -0.03  1.61  0.94  5.09  0.71  3.74  0.94 -0.04  0.07  2.77\n [745]  2.60 -0.10  3.86  3.25  1.00  2.55  4.11  0.67  1.21  1.21  1.97  1.86  3.96  2.83  0.59  0.35  0.81  2.04 -0.10  1.09  0.01  1.56  3.66  2.68\n [769]  8.00  0.04  1.05  0.77  2.00  3.30  1.78  2.71  3.51 11.99 -0.08  1.40  2.91  3.15  4.03  2.63  2.88  1.03  1.15  4.97  0.54  1.76  1.80  0.56\n [793]  1.37  0.64  1.17  1.59  0.08  1.09 -0.08  1.46  1.32  3.05  2.54  3.16  2.33  3.25  1.33  1.34  2.64  1.68  1.68  2.44  4.72  2.46 -0.08  0.75",
        "\n [817] -0.05  0.70  2.12  0.62  1.07  0.21  0.47 -0.04 -0.04  2.65  3.60  2.28  2.84  1.29  0.05  0.61  3.20  0.02  0.06  2.01  3.24  1.87  3.38  1.07\n [841]  2.56  0.91  0.99 -0.08  0.56  1.82  0.77  1.66  2.00  0.02 -0.04  3.44  2.87  6.33  2.41  3.42  1.35  1.30  1.33  1.09  1.46 -0.08  2.50  0.88\n [865]  2.50  2.89  1.25  2.05  0.59  2.13  0.96  0.05  1.28  2.53  0.55  0.50  0.03 -0.01  1.79  0.63  2.46  2.13  0.01  3.56  1.90  1.54  1.40  2.03\n [889]  2.01  1.39  1.40  2.33  1.05  2.30  0.75  0.78  0.75",
        " -0.06 -0.08  0.03  1.45  3.29  1.90  1.63  0.86  3.43  1.44  2.27  2.38  1.30  3.78  0.85\n [913]  2.42  1.50  3.24  2.45  1.28  2.77  1.70  1.73  0.51  1.70  2.74  2.46 -0.07  0.71  0.63  2.67  0.07  0.72  2.09  0.07  0.03  1.72  1.73  3.91\n [937]  0.09  2.66  1.18  2.27  1.59  0.77  2.58  1.68  3.13  2.32  1.73  1.66  3.03 -0.07  5.00  1.21  0.53  9.92  1.42  1.40  1.10  3.92  1.04  1.69\n [961]  2.13 -0.07 -0.01  3.02  3.62  2.45  1.76  3.72  1.22  2.01  1.08  1.42  1.73  2.84  1.67  1.40  2.27  1.23  2.91",
        "  2.46  1.64  0.81  9.97  0.46\n [985]  0.98  1.02  0.94  2.76  2.72  2.88  1.07  1.41  0.09 -0.04  2.08  2.89  2.50  2.20  1.69  1.67\n [ reached getOption(\"max.print\") -- omitted 4554 entries ]\n",
        "> ",
        "defense.attributes <- c(\"Player\", \"90s\",  \"Tackles TklW\", \"Vs Dribbles Past\", \"Pressures Succ\", \"Pressures %\", \"Blocks Blocks\", \"Int\", \"Clr\", \"Err\", \"TklW%\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "Error in `[.data.frame`(LeagueDefense, , defense.attributes) : \n  undefined columns selected\n",
        "> ",
        "defense.attributes <- c(\"Player\")",
        "> ",
        "defense.attributes <- c(\"Player\", \"90s\", \"Tackles Tkl\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "> ",
        "TournDefense.data <- TournDefense[,defense.attributes]",
        "> ",
        "defense.attributes <- c(\"Player\", \"90s\", \"Tackles Tkl\", \"Tackles TklW\", \"Vs Dribbles Past\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "> ",
        "TournDefense.data <- TournDefense[,defense.attributes]",
        "> ",
        "defense.attributes <- c(\"Player\", \"90s\", \"Tackles Tkl\", \"Tackles TklW\", \"Vs Dribbles Past\", \"Pressures Succ\", \"Pressures %\", \"Blocks Blocks\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "> ",
        "TournDefense.data <- TournDefense[,defense.attributes]",
        "> ",
        "defense.attributes <- c(\"Player\", \"90s\", \"Tackles Tkl\", \"Tackles TklW\", \"Vs Dribbles Past\", \"Pressures Succ\", \"Pressures %\", \"Blocks Blocks\", \"Int\", \"Clr\", \"Err\", \"TklW%\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "Error in `[.data.frame`(LeagueDefense, , defense.attributes) : \n  undefined columns selected\n",
        "> ",
        "LeagueShoot$`Gper90`=LeagueShoot$Gls/LeagueShoot$`90s`",
        "> ",
        "TournShoot$`Gper90`=TournShoot$Gls/TournShoot$`90s`",
        "> ",
        "LeagueShoot$`Performance%`=LeagueShoot$`Performance PKatt`/LeagueShoot$`Performance PK`",
        "> ",
        "TournShoot$`Performance%`=TournShoot$`Performance PKatt`/TournShoot$`Performance PK`",
        "> ",
        "",
        "> ",
        "LeagueDefense$`TklW%`=LeagueDefense$`Tackles TklW`/LeagueDefense$`Tackles Tkl`",
        "> ",
        "TournDefense$`TklW%`=TournDefense$`Tackles TklW`/TournDefense$`Tackles Tkl`",
        "> ",
        "LeagueShoot$`Gper90`=LeagueShoot$Gls/LeagueShoot$`90s`",
        "> ",
        "TournShoot$`Gper90`=TournShoot$Gls/TournShoot$`90s`",
        "> ",
        "LeagueShoot$`Performance%`=LeagueShoot$`Performance PKatt`/LeagueShoot$`Performance PK`",
        "> ",
        "TournShoot$`Performance%`=TournShoot$`Performance PKatt`/TournShoot$`Performance PK`",
        "> ",
        "",
        "> ",
        "LeagueDefense$'TklW%'=LeagueDefense$'Tackles TklW'/LeagueDefense$'Tackles Tkl'",
        "> ",
        "TournDefense$`TklW%`=TournDefense$`Tackles TklW`/TournDefense$`Tackles Tkl`",
        "> ",
        "defense.attributes <- c(\"Player\", \"90s\", \"Tackles Tkl\", \"Tackles TklW\", \"Vs Dribbles Past\", \"Pressures Succ\", \"Pressures %\", \"Blocks Blocks\", \"Int\", \"Clr\", \"Err\", \"TklW%\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "> ",
        "TournDefense.data <- TournDefense[,defense.attributes]",
        "> ",
        "library(\"readxl\")",
        "> ",
        "",
        "> ",
        "file_path <- \"data/2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "",
        "> ",
        "#read in tables",
        "> ",
        "LeagueShoot <- read_excel(file_path, sheet = \"League Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "Error: `path` does not exist: ‘data/2022-student-research-case-study-player-data.xlsx’\n",
        "> ",
        "library(\"readxl\")",
        "> ",
        "",
        "> ",
        "file_path <- \"../data/2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "",
        "> ",
        "#read in tables",
        "> ",
        "LeagueShoot <- read_excel(file_path, sheet = \"League Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "Error: `path` does not exist: ‘../data/2022-student-research-case-study-player-data.xlsx’\n",
        "> ",
        "getwd()",
        "[1] \"/Users/liushuhao/Desktop/SOA Case Competitoin/R_Project\"\n",
        "> ",
        "library(\"readxl\")",
        "> ",
        "",
        "> ",
        "file_path <- \"/Users/liushuhao/Desktop/SOA Case Competitoin/data/2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "",
        "> ",
        "#read in tables",
        "> ",
        "LeagueShoot <- read_excel(file_path, sheet = \"League Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "Error : 'format_message' is not an exported object from 'namespace:cli'\n",
        "> ",
        "LeaguePass <- read_excel(file_path, sheet = \"League Passing\", skip = 11,col_names =T)",
        "> ",
        "LeagueDefense <- read_excel(file_path, sheet = \"League Defense\", skip = 11,col_names =T, na = \"N/A\")",
        "> ",
        "TournShoot <- read_excel(file_path, sheet = \"Tournament Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "> ",
        "TournPass <- read_excel(file_path, sheet = \"Tournament Passing\", skip = 11,col_names =T)",
        "> ",
        "TournDefense <- read_excel(file_path, sheet = \"Tournament Defense\", skip = 11,col_names =T, na = \"N/A\")",
        "> ",
        "tables <- list(\"LeagueShoot\" = LeagueShoot, \"LeaguePass\" = LeaguePass, \"LeagueDefense\" = LeagueDefense, \"TournShoot\" = TournShoot, \"TournPass\" = TournPass, \"TournDefense\" = TournDefense)",
        "> ",
        "#### Load data",
        "> ",
        "```{r}",
        "Error: attempt to use zero-length variable name\n",
        "> ",
        "file_path <- \"/Users/liushuhao/Desktop/SOA Case Competitoin/data/2022-student-research-case-study-player-data.xlsx\"",
        "> ",
        "",
        "> ",
        "#read in tables",
        "> ",
        "LeagueShoot <- read_excel(file_path, sheet = \"League Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "> ",
        "LeaguePass <- read_excel(file_path, sheet = \"League Passing\", skip = 11,col_names =T)",
        "> ",
        "LeagueDefense <- read_excel(file_path, sheet = \"League Defense\", skip = 11,col_names =T, na = \"N/A\")",
        "> ",
        "TournShoot <- read_excel(file_path, sheet = \"Tournament Shooting\", skip = 11,col_names =T, na = \"N/A\")",
        "> ",
        "TournPass <- read_excel(file_path, sheet = \"Tournament Passing\", skip = 11,col_names =T)",
        "> ",
        "TournDefense <- read_excel(file_path, sheet = \"Tournament Defense\", skip = 11,col_names =T, na = \"N/A\")",
        "> ",
        "tables <- list(\"LeagueShoot\" = LeagueShoot, \"LeaguePass\" = LeaguePass, \"LeagueDefense\" = LeagueDefense, \"TournShoot\" = TournShoot, \"TournPass\" = TournPass, \"TournDefense\" = TournDefense)",
        "> ",
        "## observe the data",
        "> ",
        "",
        "> ",
        "# number of rows in each table",
        "> ",
        "print(\"number of rows in each table\")",
        "[1] \"number of rows in each table\"\n",
        "> ",
        "for(table in tables){ ",
        "+ ",
        "  print(nrow(table))",
        "+ ",
        "}",
        "[1] 5554\n[1] 5554\n[1] 5554\n[1] 2015\n[1] 488\n[1] 488\n",
        "> ",
        "",
        "> ",
        "# number of unique players in each table",
        "> ",
        "print(\"number of unique players in each table\")",
        "[1] \"number of unique players in each table\"\n",
        "> ",
        "for(table in tables){ ",
        "+ ",
        "  print(length(unique(table$Player)))",
        "+ ",
        "}",
        "[1] 3429\n[1] 3429\n[1] 3429\n[1] 1603\n[1] 488\n[1] 488\n",
        "> ",
        "LeagueShoot$'Gper90'=LeagueShoot$Gls/LeagueShoot$'90s'",
        "> ",
        "TournShoot$'Gper90'=TournShoot$Gls/TournShoot$'90s'",
        "> ",
        "LeagueShoot$'Performance%'=LeagueShoot$'Performance PKatt'/LeagueShoot$'Performance PK'",
        "> ",
        "TournShoot$'Performance%'=TournShoot$'Performance PKatt'/TournShoot$'Performance PK'",
        "> ",
        "",
        "> ",
        "LeagueDefense$'TklW%'=LeagueDefense$'Tackles TklW'/LeagueDefense$'Tackles Tkl'",
        "> ",
        "TournDefense$'TklW%'=TournDefense$'Tackles TklW'/TournDefense$'Tackles Tkl'",
        "> ",
        "print(\"Player Occurance:\")",
        "[1] \"Player Occurance:\"\n",
        "> ",
        "for(i in seq(max(table(LeagueDefense$Player)))) {",
        "+ ",
        "  print(paste(i, \":\", sum(table(LeagueDefense$Player) == i)))",
        "+ ",
        "}",
        "[1] \"1 : 1512\"\n[1] \"2 : 1719\"\n[1] \"3 : 189\"\n[1] \"4 : 8\"\n[1] \"5 : 1\"\n",
        "> ",
        "",
        "> ",
        "defense.attributes <- c(\"Player\", \"90s\", \"Tackles Tkl\", \"Tackles TklW\", \"Vs Dribbles Past\", \"Pressures Succ\", \"Pressures %\", \"Blocks Blocks\", \"Int\", \"Clr\", \"Err\", \"TklW%\")",
        "> ",
        "LeagueDefense.data <- LeagueDefense[,defense.attributes]",
        "> ",
        "TournDefense.data <- TournDefense[,defense.attributes]",
        "> ",
        "# find out the columns with missing values",
        "> ",
        "for(attribute in defense.attributes){",
        "+ ",
        "  if(sum(is.na(LeagueDefense.data[,attribute]))) {",
        "+ ",
        "    print(paste(sum(is.na(LeagueDefense.data[,attribute])), \"missing values in League Defense.\", attribute))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "[1] \"195 missing values in League Defense. Pressures %\"\n[1] \"2 missing values in League Defense. TklW%\"\n",
        "> ",
        "for(attribute in defense.attributes){",
        "+ ",
        "  if(sum(is.na(TournDefense.data[,attribute]))) {",
        "+ ",
        "    print(paste(sum(is.na(TournDefense.data[,attribute])), \"missing values in Tournament Defense.\", attribute))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "[1] \"26 missing values in Tournament Defense. Pressures %\"\n[1] \"2 missing values in Tournament Defense. TklW%\"\n",
        "> ",
        "# the only column with missing values are \"Pressures %\" and \"TklW%\"",
        "> ",
        "# the missing values are replace with 0, as they seem to be very small",
        "> ",
        "LeagueDefense.data[is.na(LeagueDefense.data[, \"Pressures %\"]), \"Pressures %\"] <- 0",
        "> ",
        "TournDefense.data[is.na(TournDefense.data[, \"Pressures %\"]), \"Pressures %\"] <- 0",
        "> ",
        "LeagueDefense.data[is.na(LeagueDefense.data[, \"TklW%\"]), \"TklW%\"] <- 0",
        "> ",
        "TournDefense.data[is.na(TournDefense.data[, \"TklW%\"]), \"TklW%\"] <- 0",
        "> ",
        "# Use the average value for each attribute",
        "> ",
        "library(dplyr)",
        "> ",
        "# Use the average value for each attribute",
        "> ",
        "LeagueDefense.groupByPlayer <- LeagueDefense.data %>%",
        "+ ",
        "                                 group_by(Player) %>%",
        "+ ",
        "                                 summarise_all(mean)",
        "> ",
        "",
        "> ",
        "TournDefense.groupByPlayer <- TournDefense.data %>%",
        "+ ",
        "                                 group_by(Player) %>%",
        "+ ",
        "                                 summarise_all(mean)",
        "> ",
        "print(\"Player Occurance:\")",
        "[1] \"Player Occurance:\"\n",
        "> ",
        "for(i in seq(max(table(LeaguePass$Player)))) {",
        "+ ",
        "  print(paste(i, \":\", sum(table(LeaguePass$Player) == i)))",
        "+ ",
        "}",
        "[1] \"1 : 1512\"\n[1] \"2 : 1719\"\n[1] \"3 : 189\"\n[1] \"4 : 8\"\n[1] \"5 : 1\"\n",
        "> ",
        "",
        "> ",
        "pass.attributes <- c(\"Player\",\"90s\",\"xA\",\"A-xA\",\"KP\",\"Total Cmp%\")",
        "> ",
        "LeaguePass.data <- LeaguePass[,pass.attributes]",
        "> ",
        "TournPass.data <- TournPass[,pass.attributes]",
        "> ",
        "# find out the columns with missing values",
        "> ",
        "for(attribute in pass.attributes){",
        "+ ",
        "  if(sum(is.na(LeaguePass.data[,attribute]))) {",
        "+ ",
        "    print(paste(sum(is.na(LeaguePass.data[,attribute])), \"missing values in League Passing.\", attribute))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "[1] \"31 missing values in League Passing. Total Cmp%\"\n",
        "> ",
        "for(attribute in pass.attributes){",
        "+ ",
        "  if(sum(is.na(TournPass.data[,attribute]))) {",
        "+ ",
        "    print(paste(sum(is.na(TournPass.data[,attribute])), \"missing values in Tournament Passing.\", attribute))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "[1] \"5 missing values in Tournament Passing. Total Cmp%\"\n",
        "> ",
        "# the only column with missing values is \"Total Cmp%\",",
        "> ",
        "# the missing values are replace with 0, treated as outlier",
        "> ",
        "LeaguePass.data[is.na(LeaguePass.data[, \"Total Cmp%\"]), \"Total Cmp%\"] <- 0",
        "> ",
        "TournPass.data[is.na(TournPass.data[, \"Total Cmp%\"]), \"Total Cmp%\"] <- 0",
        "> ",
        "# Use the average value for each attribute",
        "> ",
        "library(dplyr)",
        "> ",
        "LeaguePass.groupByPlayer <- LeaguePass.data %>%",
        "+ ",
        "                                 group_by(Player) %>%",
        "+ ",
        "                                 summarise_all(mean)",
        "> ",
        "",
        "> ",
        "TournPass.groupByPlayer <- TournPass.data %>%",
        "+ ",
        "                                 group_by(Player) %>%",
        "+ ",
        "                                 summarise_all(mean)",
        "> ",
        "print(\"LeagueShoot Player Occurance:\")",
        "[1] \"LeagueShoot Player Occurance:\"\n",
        "> ",
        "for(i in seq(max(table(LeagueShoot$Player)))) {",
        "+ ",
        "  print(paste(i, \":\", sum(table(LeagueShoot$Player) == i)))",
        "+ ",
        "}",
        "[1] \"1 : 1512\"\n[1] \"2 : 1719\"\n[1] \"3 : 189\"\n[1] \"4 : 8\"\n[1] \"5 : 1\"\n",
        "> ",
        "",
        "> ",
        "print(\"TournShoot Player Occurance:\")",
        "[1] \"TournShoot Player Occurance:\"\n",
        "> ",
        "for(i in seq(max(table(TournShoot$Player)))) {",
        "+ ",
        "  print(paste(i, \":\", sum(table(TournShoot$Player) == i)))",
        "+ ",
        "}",
        "[1] \"1 : 1191\"\n[1] \"2 : 412\"\n",
        "> ",
        "shoot.attributes <- c(\"Player\",\"Gper90\", \"Standard SoT%\", \"Standard G/Sh\", \"Standard SoT/90\",\"Performance%\")",
        "> ",
        "LeagueShoot.data <- LeagueShoot[,shoot.attributes]",
        "> ",
        "TournShoot.data <- TournShoot[,shoot.attributes]",
        "> ",
        "# find out the columns with missing values",
        "> ",
        "for(attribute in shoot.attributes){",
        "+ ",
        "  if(sum(is.na(LeagueShoot.data[,attribute]))) {",
        "+ ",
        "    print(paste(sum(is.na(LeagueShoot.data[,attribute])), \"missing values in League Forward.\", attribute))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "[1] \"1031 missing values in League Forward. Standard SoT%\"\n[1] \"1031 missing values in League Forward. Standard G/Sh\"\n[1] \"14 missing values in League Forward. Performance%\"\n",
        "> ",
        "for(attribute in shoot.attributes){",
        "+ ",
        "  if(sum(is.na(TournShoot.data[,attribute]))) {",
        "+ ",
        "    print(paste(sum(is.na(TournShoot.data[,attribute])), \"missing values in Tournament Forward.\", attribute))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "[1] \"737 missing values in Tournament Forward. Standard SoT%\"\n[1] \"737 missing values in Tournament Forward. Standard G/Sh\"\n[1] \"3 missing values in Tournament Forward. Performance%\"\n",
        "> ",
        "# the columns with missing values are \"Standard SoT%\",\"Standard G/Sh\".",
        "> ",
        "# the missing values are replace with 0, as they seem to be very small",
        "> ",
        "LeagueForward.data[is.na(LeagueForward.data[, \"Standard SoT%\"]), \"Standard SoT%\"] <- 0",
        "Error in LeagueForward.data[is.na(LeagueForward.data[, \"Standard SoT%\"]),  : \n  object 'LeagueForward.data' not found\n",
        "> ",
        "# the columns with missing values are \"Standard SoT%\",\"Standard G/Sh\".",
        "> ",
        "# the missing values are replace with 0, as they seem to be very small",
        "> ",
        "LeagueShoot.data[is.na(LeagueShoot.data), \"Standard SoT%\"] <- 0",
        "Error:\n! Must assign to rows with a valid subscript vector.\nx Subscript `is.na(LeagueShoot.data)` must be a simple vector, not a matrix.\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mbase\u001B[22m::`[<-`(...)\n\u001B[90m 9. \u001B[39m\u001B[1mrlang\u001B[22m::cnd_signal(`<vctrs___>`)\n",
        "> ",
        "# the columns with missing values are \"Standard SoT%\",\"Standard G/Sh\".",
        "> ",
        "# the missing values are replace with 0, as they seem to be very small",
        "> ",
        "LeagueShoot.data[is.na(LeagueShoot.data[, \"Standard SoT%\"]), \"Standard SoT%\"] <- 0",
        "> ",
        "LeagueShoot.data[is.na(LeagueShoot.data[, \"Standard G/Sh\"]), \"Standard G/Sh\"] <- 0",
        "> ",
        "LeagueShoot.data[is.na(LeagueShoot.data[, \"Performance%\"]), \"Performance%\"] <- 0",
        "> ",
        "TournShoot.data[is.na(TournShoot.data[, \"Standard SoT%\"]), \"Standard SoT%\"] <- 0",
        "> ",
        "TournShoot.data[is.na(TournShoot.data[, \"Standard G/Sh\"]), \"Standard G/Sh\"] <- 0",
        "> ",
        "TournShoot.data[is.na(TournShoot.data[, \"Performance%\"]), \"Performance%\"] <- 0",
        "> ",
        "# Use the average value for each attribute",
        "> ",
        "library(dplyr)",
        "> ",
        "LeagueShoot.groupByPlayer <- LeagueForward.data %>%",
        "+ ",
        "                                 group_by(Player) %>%",
        "+ ",
        "                                 summarise_all(mean)",
        "Error in group_by(., Player) : object 'LeagueForward.data' not found\n",
        "> ",
        "# Use the average value for each attribute",
        "> ",
        "LeagueShoot.groupByPlayer <- LeagueShoot.data %>%",
        "+ ",
        "                                 group_by(Player) %>%",
        "+ ",
        "                                 summarise_all(mean)",
        "> ",
        "",
        "> ",
        "TournShoot.groupByPlayer <- TournShoot.data %>%",
        "+ ",
        "                                 group_by(Player) %>%",
        "+ ",
        "                                 summarise_all(mean)",
        "> ",
        "tables.gbp <- list(\"ls.gbp\" = LeagueShoot.groupByPlayer, \"ts.gbp\" = TournShoot.groupByPlayer, \"ld,gbp\" = LeagueDefense.groupByPlayer, \"td.gbp\" = TournDefense.groupByPlayer, \"lp.gbp\" = LeaguePass.groupByPlayer, \"tp.gbp\" = TournPass.groupByPlayer)",
        "> ",
        "",
        "> ",
        "print(\"number of rows in each table.gbp\")",
        "[1] \"number of rows in each table.gbp\"\n",
        "> ",
        "for(table in tables.gbp){ ",
        "+ ",
        "  print(nrow(table))",
        "+ ",
        "}",
        "[1] 3429\n[1] 1603\n[1] 3429\n[1] 488\n[1] 3429\n[1] 488\n",
        "> ",
        "",
        "> ",
        "League.JoinedTable=inner_join(inner_join(tables.gbp[[1]],tables.gbp[[3]],by=\"Player\"),tables.gbp[[5]],by=\"Player\")",
        "> ",
        "Tourn.JoinedTable=inner_join(inner_join(tables.gbp[[2]],tables.gbp[[4]],by=\"Player\"),tables.gbp[[6]],by=\"Player\")",
        "> ",
        "nrow(League.JoinedTable)",
        "[1] 3429\n",
        "> ",
        "nrow(Tourn.JoinedTable)",
        "[1] 488\n",
        "> ",
        "",
        "> ",
        "Tourn.JoinedTable.Tailored=subset(Tourn.JoinedTable,Tourn.JoinedTable$Player %in% League.JoinedTable$Player)",
        "> ",
        "League.JoinedTable.Tailored=subset(League.JoinedTable,League.JoinedTable$Player %in% Tourn.JoinedTable$Player)",
        "> ",
        "#nrow(Tourn.JoinedTable.Tailored)",
        "> ",
        "#nrow(League.JoinedTable.Tailored)",
        "> ",
        "#Tourn.JoinedTable.Tailored$Player %in% League.JoinedTable.Tailored$Player",
        "> ",
        "#League.JoinedTable.Tailored$Player %in% Tourn.JoinedTable.Tailored$Player",
        "> ",
        "tables.gbp <- list(\"ls.gbp\" = LeagueShoot.groupByPlayer, \"ts.gbp\" = TournShoot.groupByPlayer, \"ld,gbp\" = LeagueDefense.groupByPlayer, \"td.gbp\" = TournDefense.groupByPlayer, \"lp.gbp\" = LeaguePass.groupByPlayer, \"tp.gbp\" = TournPass.groupByPlayer)",
        "> ",
        "",
        "> ",
        "League.tables <- list(LeagueShoot.groupByPlayer, LeaguePass.groupByPlayer, LeagueDefense.groupByPlayer)",
        "> ",
        "Tourn.tables <- list(TournShoot.groupByPlayer, TournPass.groupByPlayer, TournDefense.groupByPlayer)",
        "> ",
        "",
        "> ",
        "League.JoinedTable=inner_join(inner_join(League.tables[[1]],League.tables[[2]],by=\"Player\"),League.tables[[3]],by=\"Player\")",
        "> ",
        "Tourn.JoinedTable=inner_join(inner_join(Tourn.tables[[1]],Tourn.tables[[2]],by=\"Player\"),Tourn.tables[[3]],by=\"Player\")",
        "> ",
        "nrow(League.JoinedTable)",
        "[1] 3429\n",
        "> ",
        "nrow(Tourn.JoinedTable)",
        "[1] 488\n",
        "> ",
        "",
        "> ",
        "Tourn.JoinedTable.Tailored=subset(Tourn.JoinedTable,Tourn.JoinedTable$Player %in% League.JoinedTable$Player)",
        "> ",
        "League.JoinedTable.Tailored=subset(League.JoinedTable,League.JoinedTable$Player %in% Tourn.JoinedTable$Player)",
        "> ",
        "#nrow(Tourn.JoinedTable.Tailored)",
        "> ",
        "#nrow(League.JoinedTable.Tailored)",
        "> ",
        "#Tourn.JoinedTable.Tailored$Player %in% League.JoinedTable.Tailored$Player",
        "> ",
        "#League.JoinedTable.Tailored$Player %in% Tourn.JoinedTable.Tailored$Player",
        "> ",
        "tables.gbp <- list(\"ls.gbp\" = LeagueShoot.groupByPlayer, \"ts.gbp\" = TournShoot.groupByPlayer, \"ld,gbp\" = LeagueDefense.groupByPlayer, \"td.gbp\" = TournDefense.groupByPlayer, \"lp.gbp\" = LeaguePass.groupByPlayer, \"tp.gbp\" = TournPass.groupByPlayer)",
        "> ",
        "League.tables <- list(LeagueShoot.groupByPlayer, LeaguePass.groupByPlayer, LeagueDefense.groupByPlayer)",
        "> ",
        "Tourn.tables <- list(TournShoot.groupByPlayer, TournPass.groupByPlayer, TournDefense.groupByPlayer)",
        "> ",
        "",
        "> ",
        "League.JoinedTable <- inner_join(inner_join(League.tables[[1]], League.tables[[2]], by=\"Player\"), League.tables[[3]], by=\"Player\")",
        "> ",
        "Tourn.JoinedTable <- inner_join(inner_join(Tourn.tables[[1]], Tourn.tables[[2]], by=\"Player\"), Tourn.tables[[3]], by=\"Player\")",
        "> ",
        "nrow(League.JoinedTable)",
        "[1] 3429\n",
        "> ",
        "nrow(Tourn.JoinedTable)",
        "[1] 488\n",
        "> ",
        "",
        "> ",
        "Tourn.JoinedTable.Tailored=subset(Tourn.JoinedTable,Tourn.JoinedTable$Player %in% League.JoinedTable$Player)",
        "> ",
        "League.JoinedTable.Tailored=subset(League.JoinedTable,League.JoinedTable$Player %in% Tourn.JoinedTable$Player)",
        "> ",
        "nrow(Tourn.JoinedTable.Tailored)",
        "[1] 306\n",
        "> ",
        "nrow(League.JoinedTable.Tailored)",
        "[1] 306\n",
        "> ",
        "#Tourn.JoinedTable.Tailored$Player %in% League.JoinedTable.Tailored$Player",
        "> ",
        "#League.JoinedTable.Tailored$Player %in% Tourn.JoinedTable.Tailored$Player",
        "\nRestarting R session...\n\n"
    ]
}